%% LOAD REGISTERED DATA FILE AND BEHAVIORAL ANNOTATION DATA

% Load matfile object to query session data size
[dataFile, parentDir, ~] = uigetfile('*.mat', 'Select an imaging data session file', 'B:\Dropbox (HMS)\2P Data\Imaging Data\');
if dataFile == 0
    % Skip loading if user clicked "Cancel"
    disp('Initialization cancelled')
else
    m = matfile([parentDir, dataFile]); % Only field is 'wholeSession'
    
    % Prompt user for reference images file
    [refImgFile, refImgPath, ~] = uigetfile('*.mat', 'Select a reference image file', parentDir);
    load(fullfile(refImgPath, refImgFile)) % --> 'refImages', 'channelNum'
    clear refImgPath refImgFile
    
    % Load analysis metadata
    load(fullfile(parentDir, 'analysisMetadata.mat')) % --> 'analysisMetadata' info struct
    analysisMetadata.refImg = refImages;
    
    % Load annotation type data
    load(fullfile(parentDir, 'annotationTypes.mat')) % --> 'annotationTypes', 'annotationTypeSummary', 'skipTrials'
    disp(annotationTypeSummary); disp(['SkipTrials = ', skipTrials])
    
    % Load processed event data
    [eventDataFile, eventDataPath, ~] = uigetfile('*.mat', 'Select an event data file', parentDir);
    load(fullfile(eventDataPath, eventDataFile))
    %===================================================================================================
    % --> 'alignEventSummary', 'filterEventSummary', 'primaryEventNames', 'eventLists',
    %     'nEventTypes', 'condNames', 'onsetFilterVecs', 'offsetFilterVecs', 'analysisWindows'
    %
    %
    %                                                 |------------event------------|          
    %       <--------fW(1)--------><----aW(1)---->[alignVol]<----aW(2)----><----fW(2)---->
    %       [------------------fD(1)-----------------][-------fD(2)-------][----fD(3)----]
    %
    %===================================================================================================
    clear eventDataPath
    disp(primaryEventNames)
    disp(alignEventSummary)
    disp(filterEventSummary)
    
    % Load dF/F data for filtered alignment events
    load(fullfile(parentDir, ['CombDffAvg_', eventDataFile])) % --> 'combinedDffAvg', 'allCondSummaries', 'allCondNames', 'combFilterVecs'   
    
    for iFold = 1
        % Copy variables for convenience
        sessionSize = size(m, 'wholeSession');
        
        expDate = analysisMetadata.expDate;
        sid = analysisMetadata.sid;
        nPlanes = analysisMetadata.nPlanes;
        nVolumes = analysisMetadata.nVolumes;
        refImg = analysisMetadata.refImg;
        if ~isempty(analysisMetadata.nFrames)
            nFrames = analysisMetadata.nFrames;
        else
            nFrames = nVolumes;
        end
        nTrials = analysisMetadata.nTrials;
        nGoodTrials = sum(analysisMetadata.goodTrials);
        stimTypes = analysisMetadata.stimTypes;
        stimOnsetTimes = analysisMetadata.stimOnsetTimes;
        stimDurs = analysisMetadata.stimDurs;
        trialDuration = analysisMetadata.trialDuration;
        volumeRate = analysisMetadata.volumeRate;
        volFrames = analysisMetadata.volFrames;
        goodTrials = analysisMetadata.goodTrials;
        stimSepTrials = analysisMetadata.stimSepTrials;
        
        % Create hardcoded parameters
        if isempty(nFrames)
            nFrames = sum(trialDuration) * FRAME_RATE;
        end
        volTimes = (1:nVolumes)' ./ volumeRate;
        frameTimes = (1:nFrames)' ./ FRAME_RATE;
        
    end%iFold
end% if

%% VIEW RAW DATA FOR A SINGLE TRIAL AND PLANE

if ~exist('m', 'var')
    [dataFile, sessionDataPath, ~] = uigetfile('*.mat', 'Select an imaging data session file', 'B:\Dropbox (HMS)\2P Data\Imaging Data\');
    if dataFile == 0
        % Skip loading if user clicked "Cancel"
        disp('Initialization cancelled')
        outputMetadata = [];
        dataFileObj = [];
    else
        m = matfile([sessionDataPath, dataFile]); % Only field is 'wholeSession'
    end 
end

planeNum = 10;
trialNum = 4; % Does not account for any skipped trials
    
preview_trial_movie(m, planeNum, trialNum, [], [], []);
clear planeNum trialNum

%% =================================================================================================
%   BEHAVIOR SUMMARIES                                   
%%%=================================================================================================
%% PLOT 2-D SUMMARY OF BEHAVIOR DATA ANNOTATIONS

saveFig = 0;
plotTypes = [2 1]; % 1 = odor stims, 2 = behavior
s = stimSepTrials;

trialGroups = [];
plotTitleSuffix = '';
fileNameSuffix = '_AllTrials';
% 
% trialGroups = [[s.OdorA + 2 * s.OdorB + 3 * s.NoStim] .* goodTrials]; 
% plotTitleSuffix = ' - Ethanol\_neat (top) vs. CO2\_e-2 (mid) vs. no Stim (bottom)';%
% fileNameSuffix = '_OdorAvsOdorBvsNoStim';

for iFold = 1

% Create plot titles
nPlots = length(plotTypes);
titleStrings = [];
plotNames = [];
annotArr = [];
for iPlot = 1:nPlots
    if plotTypes(iPlot) == 1
        % Odor stim
        tempAnnotArr = annotArr_OdorA + 0.5 * annotArr_OdorB;
        plotNames{iPlot} = 'Odor Delivery';
        titleStrings{iPlot} = [regexprep(expDate, '_', '\\_'), '    ', [plotNames{iPlot}, ' summary ', plotTitleSuffix]]; % regex to add escape characters
        annotArr{iPlot} = tempAnnotArr;
    elseif plotTypes(iPlot) == 2
         % Behavior
        plotNames{iPlot} = 'Behavior Annotation';
        titleStrings{iPlot} = [regexprep(expDate, '_', '\\_'), '    ', [plotNames{iPlot}, ' summary ', plotTitleSuffix]]; % regex to add escape characters
        annotArr{iPlot} = behaviorAnnotArr;
    end%if
end%for

% Create figure
f = figure(7);clf
if nPlots == 1
    f.Position = [200 45 1020 950];
elseif nPlots == 2
    f.Position = [200 45 900 950];
elseif nPlots == 3
    f.Position = [200 45 700 950];
end
f.Color = [1 1 1];

% Plot and format each figure
for iPlot = 1:nPlots
    
    subaxis(nPlots, 1, iPlot, ...
            'MarginTop', 0, ...
            'MarginBottom', 0.055, ...
            'MarginRight', 0.015, ...
            'MarginLeft', 0.065, ...
            'Spacing', 0, ...
            'PaddingTop', 0.03 ...
            );
    ax = gca;
    [~, ax, ~] = plot_behavior_summary_2D(myData, annotArr{iPlot}, ax, titleStrings{iPlot}, trialGroups);
    ax.FontSize = 11;
    ax.Title.FontSize = 11;
    ax.XLabel.FontSize = 13;
    if iPlot ~= nPlots
        ax.XLabel = [];
        ax.XTickLabels = [];
    end 
    
end

if saveFig
    % Create analysis directory if necessary
    saveDir = ['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'];
    if ~isdir(saveDir)
        mkdir(saveDir);
    end
    
    % Create filename
    for iPlot = 1:nPlots
        fileName = [regexprep(plotNames{iPlot}, ' ', '')];
    end
    fileName = [fileName, '_Summary ', fileNameSuffix, '_', expDate];
    
    % Warn user and offer to cancel save if this will overwrite existing files
    overwrite = 1;
    if exist(fullfile(saveDir, [fileName, '.fig']), 'file') ~= 0 || ...
            exist(fullfile(saveDir, [fileName, '.png']), 'file') ~= 0 
        dlgAns = questdlg('Saving this figure will overwrite one or more existing files in this directory...are you sure you want to do this?', 'Warning', 'Yes', 'No', 'No');
        if strcmp(dlgAns, 'No')
            overwrite = 0;
            disp('Saving cancelled')
        end
    end
    
    % Save figure files
    if overwrite
        savefig(f, fullfile(saveDir, fileName));
        export_fig(fullfile(saveDir, fileName), '-png', f);

    end
end%if

clear saveFig plotTypes trialGroups plotTitleSuffix fileNameSuffix s nPlots titleStrings plotNames annotArr f saveDir fileName overwrite dlgAns
end%iFold'

%% PLOT 1-D VISUALIZATION OF BEHAVIOR DATA ANNOTATIONS

%----- Plot 1D trial-averaged movement data -----
s = myData.stimSepTrials;

saveFig = 0
actionNum = [2]; % locomotionLabel = 2; noActionLabel = 0; groomingLabel = 3; isoMovementLabel = 4;
figTitle = regexprep([expDate, '  —  Fly locomotion throughout trial (red = odor)'], '_', '\\_');
plotNames = {'Ethanol\_neat', 'CO2\_e-2', 'No Stim'};

% trialGroups =  [goodTrials]; 
% % trialGroups(1:45) = 0;
% % trialGroups(45:end) = 0;
% fileNameSuffix = '_AllTrials_Locomotion';
% 
trialGroups =  [s.OdorA + 2 * s.OdorB + 3 * s.NoStim] .* goodTrials; 
% trialGroups(1:10) = 0;
trialGroups(40:end) = 0;
fileNameSuffix = '_OdorAvsOdorBvsNoStim_Locomotion_LateTrials'; 

stimShadingColors = {'red', 'green'};

for iFold = 1
   
% Get odor stim times
odorOnset = mean(myData.stimOnsetTimes(logical(s.OdorA + s.OdorB)));
odorOffset = odorOnset + mean(myData.stimDurs(logical(s.OdorA + s.OdorB)));
odorTimes = [odorOnset, odorOffset];
odorFrames = floor(odorTimes * FRAME_RATE);

% Get laser stim times
% laserOnset = mean(myData.stimOnsetTimes(logical(s.Laser)));
% laserOffset = laserOnset + mean(myData.stimDurs(logical(s.Laser)));
% laserTimes = [laserOnset, laserOffset];
% laserFrames = floor(laserTimes * FRAME_RATE);

stimShading = {odorFrames};

% Create array of annotation data
f = figure(2); clf;
f.Position = [100 100 1600 500];
f.Color = [1 1 1];

if isempty(trialGroups)
    
    % Plot summed movement data
    annotArrSum = sum(ismember(behaviorAnnotArr, actionNum), 1) ./ nTrials;
    ax = gca();
    plot_behavior_summary_1D(myData, annotArrSum(2:end-1), ax, figTitle);
    
    % Add shading during stimulus presentations
    yL = ylim();
    for iType = 1:numel(stimShading)
        for iStim = 1:size(stimShading{iType}, 1)
            stimStart = stimShading{iType}(iStim, 1);
            stimLength = stimShading{iType}(iStim, 2) - stimShading{iType}(iStim, 1);
            rectPos = [stimStart, yL(1), stimLength, diff(yL)]; % [x y width height]
            rectangle('Position', rectPos, 'FaceColor', [rgb(stimShadingColors{iType}), 0.1], 'EdgeColor', 'none');
            ylim(yL);
        end
    end
else
    annotArrSum = [];
    yLimsAll = [];
    ax = [];
    for iGroup = 1:length(unique(trialGroups(trialGroups ~= 0)))
        
        % Plot summed movement data
        f.Position = [100 50 1000 950];
        ax{iGroup} = subplot(numel(unique(trialGroups(trialGroups ~= 0))), 1, iGroup);
        annotArrSum = sum(ismember(behaviorAnnotArr(trialGroups == iGroup, :), actionNum), 1) ./ sum(trialGroups == iGroup);
        plot_behavior_summary_1D(myData, annotArrSum, ax{iGroup}, plotNames{iGroup});
        
        if iGroup ~= length(unique(trialGroups))
            xlabel('');
        end
        
        % Add shading during stimulus presentations
        yL = ylim();
        yLimsAll(iGroup, :) = yL;
        for iType = 1:numel(stimShading)
            for iStim = 1:size(stimShading{iType}, 1)
                stimStart = stimShading{iType}(iStim, 1);
                stimLength = stimShading{iType}(iStim, 2) - stimShading{iType}(iStim, 1);
                rectPos = [stimStart, 0, stimLength, 1000]; % using large height value in case yLims increase later
                rectangle('Position', rectPos, 'FaceColor', [rgb(stimShadingColors{iType}), 0.1], 'EdgeColor', 'none');
                ylim(yL);
            end
        end
    end%iGroup
    
    % Make sure all plots use the same yLims
    yLimMax = max(yLimsAll(:));
    for iGroup = 1:length(unique(trialGroups(trialGroups~=0)))
        ylim(ax{iGroup}, [yLimsAll(iGroup, 1), yLimMax]);
    end
    
    suptitle(figTitle);
end

if saveFig
    % Create analysis directory if necessary
    saveDir = ['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'];
    if ~isdir(saveDir)
        mkdir(saveDir);
    end
    
    % Create filename
    fileName = regexprep(['Summed_Movement', fileNameSuffix, '_', expDate], '_', '\_');
    
    % Warn user and offer to cancel save if this will overwrite existing files
    overwrite = 1;
    if exist(fullfile(saveDir, [fileName, '.fig']), 'file') ~= 0 || ...
            exist(fullfile(saveDir, [fileName, '.png']), 'file') ~= 0 
        dlgAns = questdlg('Saving this figure will overwrite one or more existing files in this directory...are you sure you want to do this?', 'Warning', 'Yes', 'No', 'No');
        if strcmp(dlgAns, 'No')
            overwrite = 0;
            disp('Saving cancelled')
        end
    end
    
    % Save figure files
    if overwrite
        savefig(f, fullfile(saveDir, fileName));
        export_fig(fullfile(saveDir, fileName), '-png', f);

    end
end%if

clear s saveFig fileNameSuffix actionLabel trialGroups figTitle plotNames stimShadingColors odorOnset odorOffset odorTimes odorFrames laserOnset laserOffsetlaserTimes 
clear laserFrames stimShading f annotArrSum ax yL stimStart stimLength rectPos yLimsAll yLimMax saveDir fileName overwrite dlgAns
end%iFold

%% =================================================================================================
%   ODOR STIM HEATMAPS                                
%%%=================================================================================================
for iFoldOut = 1
    
    %% PLOT ODOR ONSET/OFFSET HEATMAPS FOR SOME TRIAL CONDITIONS
    
    % Show summary again
    odorEventName = 'odor_B';
    eventInd = ~cellfun(@isempty, strfind(primaryEventNames, odorEventName));
    currSummary = allCondSummaries{eventInd};
    currCondNames = allCondNames{eventInd};
    disp(currSummary)
    
    % Calculate absolute max dF/F value across all planes and stim types
    currConds = [3 6];
    makeVid = 1;
    sigma = [0.6];   
    rangeType = 'Max';
    rangeScalar = 0.8;
    saveDir = [];
    fileName = 'CO2_Response_Heatmaps';

    plotTitles = [];
    for iCond = currConds
        plotTitles{iCond} = [regexprep(currCondNames{iCond}, '_', '\\_'), ' ', currSummary{iCond, 3}{:}, '  (n = ', num2str(currSummary{iCond, 1}), ')'];
    end
   
    % Plot figures
    dffCurrConds = combinedDffAvg{eventInd}(:,:,:, currConds);
    range = calc_range(dffCurrConds, rangeScalar, rangeType);
    [~, ~] = plot_heatmaps(dffCurrConds, analysisMetadata, range, plotTitles(currConds), sigma, 'fileName', fileName, 'makeVid', makeVid, 'saveDir', saveDir);
     
clear odorEventName eventInd currSummary currCondNames currConds sigma rangeType rangeScalar makeVid saveDir fileName plotTitles dffCurrConds range
end%iFoldOut   
    
%% =================================================================================================
%   BEHAVIOR HEATMAPS                                   
%%%=================================================================================================
for iFold = 1
    %% PLOT OVERALL MEAN dF/F ACROSS BEHAVIORAL STATES

    behaviorNames = {'Locomotion', 'Grooming', 'IsoMove', 'AnyMove'};
    actionNum = [3];

    smoothingSigma = [0.6]; 
    rangeType = 'max';
    rangeScalar = 1;
    makeVid = 1;
    saveDir = [];
    fileName = ['All_frame_dFF_', behaviorNames{actionNum}, '_Heatmaps'];
    titleStr = {'dF/F - ', behaviorNames(actionNum), ' vs. Quiescence'};
    
    % Load dF/F data
    load(fullfile(parentDir, ['actionDff_', behaviorNames{actionNum}, '.mat'])) % --> 'actionDff'

    % Calculate absolute max dF/F value across all planes and action states
    range = calc_range(actionDff, rangeScalar, rangeType);

    % Plot figures
    [f, ~] = plot_heatmaps(actionDff, analysisMetadata, range, titleStr, smoothingSigma, 'fileName', fileName, 'makeVid', makeVid, ...
                           'saveDir', saveDir);
                       
clear smoothingSigma rangeType rangeScalar makeVid saveDir fileName titleStr range 

    %% PLOT INTERACTION HEATMAPS FOR SOME TRIAL CONDITIONS
    
    % Show summary again
    eventInd = ~cellfun(@isempty, strfind(primaryEventNames, 'locomotion'));
    currSummary = allCondSummaries{eventInd};
    disp(currSummary)
                 
    currCondNames = repmat(allCondNames{eventInd}, 2, 1);
    
    % Calculate absolute max dF/F value across all planes and stim types
    currConds = [2 3 6 5];
    sigma = [0.6]; 
    rangeType = 'Max';
    rangeScalar = 0.8;
    makeVid = 1;
    saveDir = [];
    fileName = 'Locomotion_Heatmaps';

    plotTitles = [];
    for iCond = currConds
        plotTitles{iCond} = [regexprep(currCondNames{iCond}, '_', '\\_'), ' ', currSummary{iCond, 3}{:}, '  (n = ', num2str(currSummary{iCond, 1}), ')'];
    end
   
    % Plot figures
    dffCurrConds = combinedDffAvg{eventInd}(:,:,:, currConds);
    range = calc_range(dffCurrConds, rangeScalar, rangeType);
    [~, ~] = plot_heatmaps(dffCurrConds, myData, range, plotTitles(currConds), sigma, 'fileName', fileName, 'makeVid', makeVid, 'saveDir', saveDir); 

    clear eventInd currSummary currCondNames currConds sigma rangeType rangeScalar makeVid saveDir fileName plotTitles range

end%iFold

%% =================================================================================================
%           ROI-BASED ANALYSES                                   
%%%=================================================================================================
for iFold = 0
    
%% PLOT AND SAVE NEW ROIs

ROIselectionGui();
    
%% LOAD ROI DATA

parentDir = ['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(myData.sid), '\Analysis\ROIs'];
metaDataFileName = 'ROI_Metadata.mat';
dffDataFileName = 'ROI_Data_Avg.mat';

% Load metadata
load(fullfile(parentDir, metaDataFileName)); % --> ROImetadata(.mask, .xi, .yi, .plane, .color, .refImg)
analysisMetadata.ROImetadata = ROImetadata;
analysisMetadata.nROIs = numel(ROIdata); nROIs = analysisMetadata.nROIs;

% Load imaging and dF/F data
load(fullfile(parentDir, dffDataFileName)); % --> 'ROIDataAvg', 'ROIDffAvg' ([volume, trial, ROI])
disp('ROI data loaded')

clear parentDir metaDataFileName dffDataFileName 

%% CALCULATE EVENT-TRIGGERED dF/F WITHIN ROIs

baselineROIDff = []; respROIDff = []; ROIEventDff = []; baselineDff = []; ROIEventDffAvgCell = [];
for iType = 1:nEventTypes
    
    primaryFiltName = primaryEventNames{iType};
    analysisWindow = analysisWindows(iType, :);
    baselineDur = analysisWindow(1);
    respDur = analysisWindow(2);
    
    currCondSum = allCondSummaries{iType};
    nConds = numel(currCondSum.CondName);
    
    eventList = eventLists{iType};

    for iCond = 1:nConds
        
        disp(['Extracting event data for ', primaryFiltName, ' cond #', num2str(iCond), ' of ', num2str(nConds), '...'])
        
        % Get ROI data for event onsets
        offsetAlign = strcmp(currCondSum.Align{iCond}, 'offset');
        [baselineData, respData] = extract_event_volumes(eventList, combFilterVecs{iType}(:,iCond), baselineDur, respDur, analysisMetadata, ...
            permute(ROIDffAvg, [3 1 2]), 'offsetAlign', offsetAlign); % --> [ROI, volume, event]
        
        currBaselineROIAvg = []; currRespROIAvg = []; currROIDff = []; baselineDff = [];
        for iROI = 1:nROIs
            disp(['ROI #', num2str(iROI), ' of ', num2str(nROIs), '...'])
            currMask = ROImetadata(iROI).mask;
            currPlane = ROImetadata(iROI).plane;
            nEvents = size(baselineData, numel(size(baselineData)));
            
            % Baseline period
            baselineVols = size(baselineData, 2);
            currPlaneBaselineData = squeeze(baselineData(:,:,currPlane,:,:));                       % --> [y, x, volume, event]
            currPlaneBaselineData(~currMask(:,:, ones(1, baselineVols), ones(1, nEvents))) = nan;   % --> [y, x, volume, event]
            currBaselineLin = reshape(currPlaneBaselineData, size(currPlaneBaselineData, 1)*size(currPlaneBaselineData, 2), ...
                baselineVols, nEvents);                                               % --> [pixel, volume, event]
            currBaselineROIAvg = squeeze(mean(currBaselineLin, 1, 'omitnan'));                      % --> [volume, event]
            
            % Response period
            respVols = size(respData, 4);
            currPlaneRespData = squeeze(respData(:,:,currPlane,:,:));                               % --> [y, x, volume, event]
            currPlaneRespData(~currMask(:,:, ones(1, respVols), ones(1, nEvents))) = nan;           % --> [y, x, volume, event]
            currRespLin = reshape(currPlaneRespData, size(currPlaneRespData, 1)*size(currPlaneRespData, 2), ...
                respVols, nEvents);                                                   % --> [pixel, volume, event]
            currRespROIAvg = squeeze(mean(currRespLin, 1, 'omitnan'));                              % --> [volume, event]
            
            % Get dF/F for entire period
            baselineMean = mean(currBaselineROIAvg, 1);                                             % --> [event]
            baselineRep = repmat(baselineMean, size(currRespROIAvg, 1), 1);                         % --> [volume, event]
            currROIDff(:,:,iROI) = (currRespROIAvg - baselineRep) ./ baselineRep;                   % --> [volume, event, ROI]
            baselineRep = repmat(baselineMean, size(currBaselineROIAvg, 1), 1);
            baselineDff(:,:,iROI) = (currBaselineROIAvg - baselineRep) ./ baselineRep;              % --> [volume, event, ROI]
        end%if
        combDff = cat(1, baselineDff, currROIDff);                                                  % --> [volume, event, ROI]
        ROIEventDff{iType}{iCond} = combDff;                                                        % --> {eventType}{cond}[volume, event, ROI]
        ROIEventDffAvgCell{iType}{iCond} = squeeze(mean(combDff, 2));                               % --> {eventType}{cond}[volume, ROI]
        
    end%iCond
    clear respData baselineData currRespLin currRespROIAvg baselineMean baselineRep respVols currPlaneRespData currPlaneBaselineData currBaselineLin baselineDff combDff
    disp('ROI event data extracted');
end% iType
clear primaryFiltName analysisWindow eventList baselineDur respDur currMask currPlan nEvents baselineVols

% Collapse result to a single-level cell array
ROIEventDffAvg = [];
for iType = 1:nEventTypes
    currDffAvg = ROIEventDffAvgCell{iType};         % --> {cond}[volume, ROI]}
    ROIEventDffAvg{iType} = cat(3, currDffAvg{:});  % --> {eventType}[volume, ROI, cond];
end
clear currDffAvg currDff


%% PLOT EVENT-ALIGNED dF/F WITHIN ROIs

% Show summary again
eventName = 'groom';
shadeDur = 0;
eventInd = ~cellfun(@isempty, strfind(primaryEventNames, eventName));
currSummary = allCondSummaries{eventInd};
disp(currSummary)

currConds = [2 5];
currCondNames = allCondNames{eventInd}(currConds);

currDffData = ROIEventDff{eventInd}(currConds); % --> {cond}[volume, event, ROI]

fileNamePrefix = 'EtOH_responses_';

saveDir = 0;
saveDir = uigetdir(['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'], 'Select a save directory');


ROIlist = 1:size(currDffData{1}, 3);
% ROIlist = [1 2 3];

ax = []; yLims = [];
for iROI = ROIlist
    
    % Create figure
    f = figure(iROI); clf
    f.Position = [-1850 100 1500 800];
    f.Color = [1 1 1];
    
    % Plot reference image and ROI outline
    currPlane = myData.ROIdata(iROI).plane;
    xData = myData.ROIdata(iROI).xi;
    yData = myData.ROIdata(iROI).yi;
    nPlots = numel(currDffData) + 1;
    if nPlots == 3
        plotPos = [2 2]; % Because [1 3] looks bad
    else
        plotPos = numSubplots(nPlots);
    end
    subaxis(plotPos(1), plotPos(2), 1,'ML', 0.05, 'MR', 0.02, 'MT', 0.05, 'MB', 0.08, 'SV', 0.1, 'SH', 0.05)
    hold on
    imshow(myData.refImg{currPlane}, [0 MAX_INTENSITY]);
    plot(xData, yData, 'Color', 'g');
    title(['Plane #', num2str(myData.ROIdata(iROI).plane)])
    
    % Plot dF/F for each condition
    alignStr = currSummary.Align(currConds);
    for iPlot = 1:(nPlots - 1) 
        if strcmp(alignStr{iPlot}, 'onset')
            eventShading = [0, shadeDur];
        else
            eventShading = [-shadeDur, 0];
        end
        plotDff = currDffData{iPlot}(:,:,iROI);
        if nPlots == 3
            subaxis(plotPos(1), plotPos(2), iPlot + 2); % If there's only two plots they look better side-by-side
        elseif nPlots == 5
            subaxis( ((mod(iPlot,2) + iPlot) / 2) + iPlot ); % If there's four they should be in a square
        else
            subaxis(plotPos(1), plotPos(2), iPlot + 1)
        end
        ax{iPlot} = gca;
        volOffset = round(analysisWindows(eventInd, 1) * volumeRate * -1);
        plot_ROI_data(ax{iPlot}, plotDff, 'EventShading', eventShading, 'VolumeRate', volumeRate, 'VolOffset', volOffset, 'OutlierSD', 5); 
        title(regexprep([expDate, ' - ', currCondNames{iPlot}, ' - ', alignStr{iPlot}], '_', '\\_'))
        yLims(iPlot,:) = ylim(ax{iPlot});
    end
    
    % Scale y-axes to match
    yMin = min(yLims(:));
    yMax = max(yLims(:));
    for iPlot = 1:(nPlots - 1)
       ylim(ax{iPlot}, [yMin yMax]); 
    end
    
    % Save figure -------------------------------------------------------------------------------
    if saveDir
        fileName = [fileNamePrefix, 'ROI_', num2str(iROI), '_Plane_', num2str(currPlane), '_', expDate];
        savefig(f, fullfile(saveDir, fileName));
        export_fig(fullfile(saveDir, fileName), '-png', f);
    end
end
    
 
    %% PLOT MEAN ROI dF/F THROUGHOUT TRIAL FOR ONE OR MORE STIM TYPES

    saveDir = uigetdir(['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'], 'Select a save directory');
    plotTitle = regexprep([expDate, ' - EtOH_neat (top), CO2_e-2 (middle), No stim (bottom)'], '_', '\\_');
    fileNamePrefix = 'Whole_Trial_Responses_';
    s = analysisMetadata.stimSepTrials;
    eventShading = [13 15];
    filterVecs = logical([s.OdorA; s.OdorB; s.NoStim] .* repmat(goodTrials, 3, 1));
    
    singleTrials = 1;
    singleTrialAlpha = 0.5;
    stdDevShading = 1;
    
    ROIlist = 1:size(ROIDffAvg, 3);
%     ROIlist = [1 2 3];
    
    yL = [];
    for iROI = ROIlist       

        nPlots = size(filterVecs, 1);
        nRows = nPlots + 1;
        
        % Create figure
        f = figure(iROI); clf
        f.Position = [-1450 50 1000 900];
        f.Color = [1 1 1];
        
        % Plot reference image and ROI outline
        currPlane = ROImetadata(iROI).plane;
        xData = ROImetadata(iROI).xi;
        yData = ROImetadata(iROI).yi;
        subaxis(nRows, 3, [1 2], 'ML', 0.06, 'MR', 0.015, 'MT', 0.05, 'MB', 0.08, 'SH', 0)
        hold on
        imshow(analysisMetadata.refImg{currPlane}, [0 MAX_INTENSITY]);
        plot(xData, yData, 'Color', 'g');
        title(['Plane #', num2str(myData.ROIdata(iROI).plane)])

        clear ax
        for iPlot = 1:nPlots
            currDffAvg = ROIDffAvg(:, filterVecs(iPlot, :), iROI); % --> [volume, trial]
            subaxis(nRows, 3, ( (iPlot*3 + 1):(iPlot*3 + 3) ))
            ax(iPlot) = gca;
            plot_ROI_data(ax(iPlot), currDffAvg, 'EventShading', eventShading, ...
                                                 'SingleTrials', singleTrials, ...
                                                 'SingleTrialAlpha', singleTrialAlpha, ...
                                                 'StdDevShading', stdDevShading, ...
                                                 'OutlierSD', 4);
            yL{iPlot} = ylim(ax(iPlot));
        end
        ax(1).Title.String = plotTitle;

        % Scale y-axes to match
        yMin = min([yL{:}]);
        yMax = max([yL{:}]);
        for iPlot = 1:nPlots
            ylim(ax(iPlot), [yMin yMax]);
        end

        % Save figure -------------------------------------------------------------------------------
        if saveDir
            fileName = [fileNamePrefix, 'ROI_', num2str(iROI), '_Plane_', num2str(currPlane), '_', expDate];
            savefig(f, fullfile(saveDir, fileName));
            export_fig(fullfile(saveDir, fileName), '-png', f);
        end
    end
    
    %% PLOT MEAN ROI dF/F THROUGHOUT TRIAL FOR EARLY VS LATE TRIALS

    saveDir = uigetdir(['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'], 'Select a save directory');
    
    plotTitle = regexprep([expDate, ' - No stim - early vs late trials'], '_', '\\_');
    fileNamePrefix = 'NoStim_EarlyVsLateTrials_';
    s = analysisMetadata.stimSepTrials.NoStim;
    
    eventShading = [13 15];
    
    singleTrials = 1;
    singleTrialAlpha = 0.25;
    stdDevShading = 1;
    outlierSD = 2;
    legendStr = {'Trials 1:30', 'Trials 31:60', 'Trials 61:90'};
    
    trialGroups = ones(1, nTrials);
    trialGroups(1:10) = 0;
    trialGroups(30:end) = 2;
%     trialGroups(80:end) = 3;
    trialGroups = trialGroups(logical(s .* goodTrials));

%     ROIlist = 1:size(ROIDffAvg, 3);
    ROIlist = [1];

    for iROI = ROIlist       

        % Create figure
        f = figure(iROI); clf
        f.Position = [-1450 50 1000 900];
        f.Color = [1 1 1];

        % Plot reference image and ROI outline
        currPlane = ROImetadata(iROI).plane;
        xData = ROImetadata(iROI).xi;
        yData = ROImetadata(iROI).yi;
        subaxis(2, 3, [1 2], 'ML', 0.06, 'MR', 0.015, 'MT', 0.05, 'MB', 0.08, 'SH', 0)
        hold on
        imshow(analysisMetadata.refImg{currPlane}, [0 MAX_INTENSITY]);
        plot(xData, yData, 'Color', 'g');
        title(['Plane #', num2str(myData.ROIdata(iROI).plane)])
        
        % Create plot
        currDffAvg = ROIDffAvg(:,logical(s .* goodTrials), iROI); % --> [volume, trial]
        subaxis(2, 3, [4:6])
        ax = gca;
        plot_ROI_data(ax, currDffAvg, 'EventShading', eventShading, ...
                                      'TrialGroups', trialGroups,   ...
                                      'SingleTrials', singleTrials, ...
                                      'SingleTrialAlpha', singleTrialAlpha, ...
                                      'OutlierSD', outlierSD, ...
                                      'Legend', legendStr, ...
                                      'StdDevShading', stdDevShading);
        title(plotTitle);

        % Save figure -------------------------------------------------------------------------------
        if saveDir
            fileName = [fileNamePrefix, '_ROI_', num2str(iROI), '_Plane_', num2str(currPlane), '_', expDate];
            savefig(f, fullfile(saveDir, fileName));
            export_fig(fullfile(saveDir, fileName), '-png', f);
        end
    end

    %% PLOT MEAN ROI dF/F THROUGHOUT TRIAL COLOR CODED BY BEHAVIOR
    
    saveDir = uigetdir(['B:\Dropbox (HMS)\2P Data\Imaging Data\', expDate, '\sid_', num2str(sid), '\Analysis'], 'Select a save directory');
    plotTitle = regexprep([expDate, ' - EtOH_neat (top), CO2_e-2 (middle), No stim (bottom)'], '_', '\\_');
    fileNamePrefix = 'Behavior_Coded_Whole_Trial_Responses_';
    s = analysisMetadata.stimSepTrials;
    eventShading = [13 15];
    annotValues = [2 0];    
    
    trialFilterVecs = logical([s.OdorA; s.OdorB; s.NoStim] .* repmat(goodTrials, 3, 1));
    
    singleTrials = 1;
    singleTrialAlpha = 0.4;
    stdDevShading = 0;
    
    ROIlist = 1:size(ROIDffAvg, 3);
%     ROIlist = [1 2 3];
    
    for iROI = ROIlist       

        nPlots = size(trialFilterVecs, 1);
        nRows = nPlots + 1;
        
        % Create figure
        f = figure(iROI); clf
        f.Position = [-1450 50 1000 900];
        f.Color = [1 1 1];
        
        % Plot reference image and ROI outline
        currPlane = ROImetadata(iROI).plane;
        xData = ROImetadata(iROI).xi;
        yData = ROImetadata(iROI).yi;
        subaxis(nRows, 3, [1 2], 'ML', 0.06, 'MR', 0.015, 'MT', 0.05, 'MB', 0.08, 'SH', 0)
        hold on
        imshow(analysisMetadata.refImg{currPlane}, [0 MAX_INTENSITY]);
        plot(xData, yData, 'Color', 'g');
        title(['Plane #', num2str(myData.ROIdata(iROI).plane)])
        
        clear ax
        yL = [];
        for iPlot = 1:nPlots
            currDffAvg = ROIDffAvg(:, trialFilterVecs(iPlot, :), iROI); % --> [volume, trial]
            annotData = annotationTypes{7}.volAnnotArr;
            currAnnotArr = annotData(trialFilterVecs(iPlot, :), :);

            subaxis(nRows, 3, ( (iPlot*3 + 1):(iPlot*3 + 3) ))
            ax(iPlot) = gca; 
            
            plot_ROI_data(ax(iPlot), currDffAvg, 'AnnotArray', currAnnotArr', ... 
                                                 'AnnotValues', annotValues', ...
                                                 'EventShading', eventShading, ...
                                                 'SingleTrials', singleTrials, ...
                                                 'SingleTrialAlpha', singleTrialAlpha, ...
                                                 'StdDevShading', stdDevShading, ...
                                                 'OutlierSD', 4);            
            yL{iPlot} = ylim(ax(iPlot));
        end
        ax(1).Title.String = plotTitle;

        % Scale y-axes to match
        yMin = min([yL{:}]);
        yMax = max([yL{:}]);
        for iPlot = 1:nPlots
            ylim(ax(iPlot), [yMin yMax]);
        end

        % Save figure -------------------------------------------------------------------------------
        if saveDir
            fileName = [fileNamePrefix, 'ROI_', num2str(iROI), '_Plane_', num2str(currPlane), '_', expDate];
            savefig(f, fullfile(saveDir, fileName));
            export_fig(fullfile(saveDir, fileName), '-png', f);
        end
    end
    
    
    %% PLOT dF/F WITHIN ROIs THROUGHOUT EXPERIMENT
    
    % Concatate the trial-by-trial dF/F values into one long vector
    nROIs = size(ROIDffAvg, 3);
    concatROIDff = reshape(ROIDffAvg, nVolumes * nTrials, nROIs);   % --> [volume, ROI]
    
    % Get linear arrays of event annotations
    behavVols = annotationTypes{5}.eventVolsLin;
    odorAVols = annotationTypes{2}.eventVolsLin;
    odorBVols = annotationTypes{3}.eventVolsLin;
    noStimVols = annotationTypes{4}.eventVolsLin;
    groomVols = annotationTypes{7}.eventVolsLin;
    odorVols = annotationTypes{1}.eventVolsLin;
    for iROI = 1:nROIs
        
        f = figure(iROI); clf; hold on
        f.Position = [-1850 200 1800 600];
        title(num2str(iROI))
        
        % Plot dF/F and event annotations
        plot(smooth(concatROIDff(:,iROI), 3), 'b');
        plot(odorAVols, 'r');
        plot(odorBVols, 'g');
        plot(noStimVols, 'm');
        plot(behavVols, 'k');
        plot(groomVols, 'c');
        legend({'', 'EtOH', 'CO2', 'No Stim', 'Fly Movements'});
        
        % Add trial delineators and numbers
        allVols = 1:(nTrials * nVolumes);
        yL = ylim();
        for iVol = allVols(~logical(mod(allVols, nVolumes)))
            plot([iVol, iVol], yL,  'Color', 'k')
            text(iVol + 50, 0.8 * yL(2), num2str(round(iVol / nVolumes)+1));
        end
        
        xlim([0, 3 * nVolumes]);
    end
     

end%iFold 


%% =================================================================================================
%           OTHER ANALYSES                                   
%%%=================================================================================================
for iFold = 1

%% PCA

% Pull out data for one plane
planeNum = 12;

pcaData = mean(squeeze(m.wholeSession(:,:,planeNum,:,:)),4); % --> [y, x, volume]
[n,m,d] = size(pcaData);
data2D = double(reshape(pcaData, [(n*m), d])); % --> [pixel, volume]

tData2D = data2D'; % --> [volume, pixel]

[coeff, ~, ~, ~, explained] = pca(tData2D);

figure(1);clf;plot(explained(1:10))

coeffReshaped = reshape(coeff, [n, m, d-1]);

figure(2); clf;
subplot(2,2,1)
imshow(myData.refImg{planeNum},[0 myData.MAX_INTENSITY])
colormap(gca, 'gray')
% colormap('parula')
for iPlot = 2:4
    subplot(2, 2, iPlot); imagesc(coeffReshaped(:,:,iPlot-1));
    colormap(gca, 'bluewhitered')
end

figure(3); clf;
subplot(2,2,1)
for iPlot = 1:4
    subplot(2, 2, iPlot); imagesc(coeffReshaped(:,:,iPlot+3));
    colormap(gca, 'bluewhitered')
end

clear planeNum pcaData n m d data 2D tData2D coeff score latent explained coeffReshaped 

end%iFold
